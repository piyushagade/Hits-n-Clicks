<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Hits \'n Clicks</string>
    <string name="title_activity_landing">Hits \'n Clicks</string>
    <string name="mission_intro">Welcome Agent B! A nuclear missile is headed towards a major city in eastern Europe. Your objective is to recover a 4 digit PIN to access the Nuclear Launch console and disable the warhead.\n \nLuckily, Agent Q gave you one of his code breakers. Use it to find the code in as less moves as possible. \n\nTo learn how to use it, go to Training section.\n\nThe world\'s tomorrow depends on you Agent B!\n\nGodspeed, Agent D out.\n\n</string>
    <string name="mission_brief">A nuclear missile is headed towards a major city in eastern Europe. Your objective is to recover a 4 digit PIN to access the Nuclear Launch console and disable the warhead.\n \nLuckily, Agent Q gave you one of his code breakers. Use it to find the code in as less moves as possible. \n\nTo learn how to use it, go to Training section.\n\nThe world\'s tomorrow depends on you Agent B!\n\nGodspeed, Agent D out.\n\n</string>
    <string name="tw_bg">.43 #ifndef __LST_CONSOLE_H__\n 44 #define __LST_CONSOLE_H__\n 45 \n 46 #include "../../include/linux/libcfs/libcfs.h"\n 47 #include "../../include/linux/lnet/lnet.h"\n 48 #include "../../include/linux/lnet/lib-types.h"\n 49 #include "../../include/linux/lnet/lnetst.h"\n 50 #include "selftest.h"\n 51 #include "conrpc.h"\n 52 \n 53 typedef struct lstcon_node {\n 54lnet_process_id_t nd_id; /* id of the node */\n 55 int nd_ref;  /* reference count */\n 56 int nd_state; /* state of the node */\n 57int nd_timeout; /* session timeout */\n 58unsigned long  nd_stamp; /* timestamp of last replied RPC */\n 59struct lstcon_rpc nd_ping; /* ping rpc */\n 60 } lstcon_node_t; /* node descriptor */\n 61 \n 62 typedef struct {\n 63struct list_head ndl_link; /* chain on list */\n 64struct list_head ndl_hlink; /* chain on hash */\n 65lstcon_node_t *ndl_node; /* pointer to node */\n 66 } lstcon_ndlink_t; /* node link descriptor */\n 67 \n 68 typedef struct {\n 69struct list_head grp_link;  /* chain on global group list\n 70   */\n 71int  grp_ref;  /* reference count */\n 72int  grp_userland; /* has userland nodes */\n 73int  grp_nnode; /* # of nodes */\n 74char grp_name[LST_NAME_SIZE]; /* group name */\n 75 \n 76struct list_head grp_trans_list; /* transaction list */\n 77struct list_head grp_ndl_list; /* nodes list */\n 78struct list_head grp_ndl_hash[0];/* hash table for nodes */\n 79 } lstcon_group_t; /* (alias of nodes) group descriptor */\n 80 \n 81 #define LST_BATCH_IDLE 0xB0 /* idle batch */\n 82 #define LST_BATCH_RUNNING 0xB1 /* running batch */\n 83 \n 84 typedef struct lstcon_tsb_hdr {\n 85lst_bid_t  tsb_id;/* batch ID */\n 86int  tsb_index; /* test index */\n 87 } lstcon_tsb_hdr_t;\n 88 \n 89 typedef struct {\n 90lstcon_tsb_hdr_t bat_hdr;/* test_batch header */\n 91struct list_head bat_link;  /* chain on session\'s batches list */\n 92int  bat_ntest;  /* # of test */\n 93int  bat_state;  /* state of the batch */\n 94int  bat_arg;/* parameter for run|stop, timeout\n 95   * for run, force for stop */\n 96char bat_name[LST_NAME_SIZE];/* name of batch */\n 97 \n 98struct list_head bat_test_list; /* list head of tests (lstcon_test_t)\n 99   */\n100struct list_head bat_trans_list;  /* list head of transaction */\n101struct list_head bat_cli_list; /* list head of client nodes\n102   * (lstcon_node_t) */\n103struct list_head *bat_cli_hash; /* hash table of client nodes */\n104struct list_head bat_srv_list; /* list head of server nodes */\n105struct list_head *bat_srv_hash; /* hash table of server nodes */\n106 } lstcon_batch_t; /* (tests ) batch descriptor */\n107 \n108 typedef struct lstcon_test {\n109lstcon_tsb_hdr_t tes_hdr;  /* test batch header */\n110struct list_head tes_link;  /* chain on batch\'s tests list */\n111lstcon_batch_t *tes_batch;  /* pointer to batch */\n112 \n113int  tes_type;  /* type of the test, i.e: bulk, ping */\n114int  tes_stop_onerr; /* stop on error */\n115int  tes_oneside; /* one-sided test */\n116int  tes_concur;  /* concurrency */\n117int  tes_loop;  /* loop count */\n118int  tes_dist;  /* nodes distribution of target group */\n119int  tes_span;  /* nodes span of target group */\n120int  tes_cliidx;  /* client index, used for RPC creating */\n121 \n122struct list_head tes_trans_list; /* transaction list */\n123lstcon_group_t *tes_src_grp; /* group run the test */\n124lstcon_group_t *tes_dst_grp; /* target group */\n125 \n126int  tes_paramlen; /* test parameter length */\n127char tes_param[0]; /* test parameter */\n128 } lstcon_test_t; /* a single test descriptor */\n129 \n130 #define LST_GLOBAL_HASHSIZE 503 /* global nodes hash table size */\n131 #define LST_NODE_HASHSIZE 239 /* node hash table (for batch or group) */\n132 \n133 #define LST_SESSION_NONE 0x0 /* no session */\n134 #define LST_SESSION_ACTIVE  0x1 /* working session */\n135 \n136 #define LST_CONSOLE_TIMEOUT 300 /* default console timeout */\n137 \n138 typedef struct {\n139struct mutex  ses_mutex;  /* only 1 thread in session */\n140lst_sid_t  ses_id;  /* global session id */\n141int  ses_key; /* local session key */\n142int  ses_state;  /* state of session */\n143int  ses_timeout; /* timeout in seconds */\n144time64_t ses_laststamp; /* last operation stamp (seconds)\n145  */\n146unsigned ses_features;  /* tests features of the session\n147  */\n148unsigned ses_feats_updated:1; /* features are synced with\n149  * remote test nodes */\n150unsigned ses_force:1; /* force creating */\n151unsigned ses_shutdown:1; /* session is shutting down */\n152unsigned ses_expired:1; /* console is timedout */\n153__u64 ses_id_cookie; /* batch id cookie */\n154char  ses_name[LST_NAME_SIZE];/* session name */\n155lstcon_rpc_trans_t  *ses_ping;  /* session pinger */\n156stt_timer_tses_ping_timer; /* timer for pinger */\n157lstcon_trans_stat_t ses_trans_stat; /* transaction stats */\n158 \n159struct list_head ses_trans_list; /* global list of transaction */\n160struct list_head ses_grp_list;  /* global list of groups */\n161struct list_head ses_bat_list;  /* global list of batches */\n162struct list_head ses_ndl_list;  /* global list of nodes */\n163struct list_head *ses_ndl_hash; /* hash table of nodes */\n164 \n165spinlock_t ses_rpc_lock;  /* serialize */\n166atomic_t ses_rpc_counter;  /* # of initialized RPCs */\n167struct list_head ses_rpc_freelist; /* idle console rpc */\n168 } lstcon_session_t; /* session descriptor */\n169 \n170 extern lstcon_session_t  console_session;\n171 \n172 static inline lstcon_trans_stat_t *\n173 lstcon_trans_stat(void)\n174 {\n175return console_session.ses_trans_stat;\n  176 }\n177 \n178 static inline struct list_head *\n179 lstcon_id2hash (lnet_process_id_t id, struct list_head *hash)\n180 {\n181unsigned int idx = LNET_NIDADDR(id.nid) % LST_NODE_HASHSIZE;\n182 \n183return hash[idx];\n184 }\n185 \n186 int lstcon_console_init(void);\n187 int lstcon_ioctl_entry(unsigned int cmd, struct libcfs_ioctl_data *data);\n188 int lstcon_console_fini(void);\n189 int lstcon_session_match(lst_sid_t sid);\n190 int lstcon_session_new(char *name, int key, unsigned version,\n191  int timeout, int flags, lst_sid_t *sid_up);\n192 int lstcon_session_info(lst_sid_t *sid_up, int *key, unsigned *verp,\n193  lstcon_ndlist_ent_t *entp, char *name_up, int len);\n194 int lstcon_session_end(void);\n195 int lstcon_session_debug(int timeout, struct list_head *result_up);\n196 int lstcon_session_feats_check(unsigned feats);\n197 int lstcon_batch_debug(int timeout, char *name,\n198  int client, struct list_head *result_up);\n199 int lstcon_group_debug(int timeout, char *name,\n200  struct list_head *result_up);\n201 int lstcon_nodes_debug(int timeout, int nnd, lnet_process_id_t *nds_up,\n202  struct list_head *result_up);\n203 int lstcon_group_add(char *name);\n204 int lstcon_group_del(char *name);\n205 int lstcon_group_clean(char *name, int args);\n206 int lstcon_group_refresh(char *name, struct list_head *result_up);\n207 int lstcon_nodes_add(char *name, int nnd, lnet_process_id_t *nds_up,\n208  unsigned *featp, struct list_head *result_up);\n209 int lstcon_nodes_remove(char *name, int nnd, lnet_process_id_t *nds_up,\n210  struct list_head *result_up);\n211 int lstcon_group_info(char *name, lstcon_ndlist_ent_t *gent_up,\n212 int *index_p, int *ndent_p, lstcon_node_ent_t *ndents_up);\n213 int lstcon_group_list(int idx, int len, char *name_up);\n214 int lstcon_batch_add(char *name);\n215 int lstcon_batch_run(char *name, int timeout, struct list_head *result_up);\n216 int lstcon_batch_stop(char *name, int force, struct list_head *result_up);\n217 int lstcon_test_batch_query(char *name, int testidx,\n218 int client, int timeout,\n219 struct list_head *result_up);\n220 int lstcon_batch_del(char *name);\n221 int lstcon_batch_list(int idx, int namelen, char *name_up);\n222 int lstcon_batch_info(char *name, lstcon_test_batch_ent_t *ent_up,\n223 int server, int testidx, int *index_p,\n224 int *ndent_p, lstcon_node_ent_t *dents_up);\n225 int lstcon_group_stat(char *grp_name, int timeout,\n226 struct list_head *result_up);\n227 int lstcon_nodes_stat(int count, lnet_process_id_t *ids_up,\n228 int timeout, struct list_head *result_up);\n229 int lstcon_test_add(char *batch_name, int type, int loop,\n230 int concur, int dist, int span,\n231 char *src_name, char *dst_name,\n232 void *param, int paramlen, int *retp,\n233 struct list_head *result_up);\n234 #endif\n</string>
    <string name="training">B! Let\'s get you ready for your mission.\n\nSo, on your code breaker console, you will have 4 inputs, where you will enter your guesses. Each digit in the PIN is distinct. Once you submit your guess, the console will respond with number of Hits and number of Clicks.\n
    \nHits is the number of digits in your guess that are in the PIN and in correct position.\nClicks is the number of digits that you guessed correctly but are not where they are supposed to be.
    \n\nFor example, let\'s say the PIN is 4582, and if you enter 2460, you will get 0 Hits and 2 Clicks. 4183 will give you 2 Hits and 0 Clicks, and 2458 will give 0 Hits and 4 Clicks.
    \n\nThere are 3 ways to input digits, "Android keyboard", "Slider", and "Keypad". In "Keyboard" method, use "Decrypt" button to submit your guess. In "Slider" mode. double tap anywhere on the screen, and in "Keypad" mode, use the ">" button for the same.\n\nThere are two console layouts, one where the console is at the top, and other when it is at bottom.\n\nAnd finally, two themes to select from, "Light theme", and "Dark theme".\n\nAll these options are available in the "Settings" menu.\n\nGood Luck B!\n\nAgent Q out.\n\n</string>
    <string name="about">Author:\nPiyush\nUniversity of Florida\nComputer Science\n\nVersion:\n1.0.16(beta)</string>


</resources>